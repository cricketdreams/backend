generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["user", "transactional", "report", "session"]
}

// --------------------
// ---------- User Models ---------
model Admin {
  code       String       @id @unique
  name       String
  password   String
  share      Float        @default(100)
  mobile     String
  subadmin   Subadmin[]
  master     Master[]
  superagent Superagent[]
  agent      Agent[]
  client     Client[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@schema("user")
}

model Subadmin {
  code              String       @id @unique
  upLink            Admin        @relation(fields: [upLinkCode], references: [code])
  upLinkCode        String
  name              String
  password          String
  mobile            String
  reference         String
  share             Float
  sessionCommission Float
  matchCommission   Float
  mobileCommission  Float
  status            Boolean      @default(true)
  limit             Float
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  master            Master[]
  superagent        Superagent[]
  agent             Agent[]
  client            Client[]

  @@schema("user")
}

model Master {
  code              String       @id @unique
  upLink            Subadmin     @relation(fields: [upLinkCode], references: [code])
  upLinkCode        String
  name              String
  password          String
  mobile            String
  reference         String
  share             Float
  sessionCommission Float
  matchCommission   Float
  mobileCommission  Float
  status            Boolean      @default(true)
  limit             Float
  superagent        Superagent[]
  agent             Agent[]
  client            Client[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  Admin             Admin?       @relation(fields: [adminCode], references: [code])
  adminCode         String?

  @@schema("user")
}

model Superagent {
  code              String    @id @unique
  upLink            Master    @relation(fields: [upLinkCode], references: [code])
  upLinkCode        String
  name              String
  password          String
  mobile            String
  reference         String
  share             Float
  sessionCommission Float
  matchCommission   Float
  mobileCommission  Float
  status            Boolean   @default(true)
  limit             Float
  agent             Agent[]
  client            Client[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  Admin             Admin?    @relation(fields: [adminCode], references: [code])
  adminCode         String?
  Subadmin          Subadmin? @relation(fields: [subadminCode], references: [code])
  subadminCode      String?

  @@schema("user")
}

model Agent {
  code              String     @id @unique
  upLink            Superagent @relation(fields: [upLinkCode], references: [code])
  upLinkCode        String
  name              String
  password          String
  mobile            String
  reference         String
  share             Float
  sessionCommission Float
  matchCommission   Float
  mobileCommission  Float
  status            Boolean    @default(true)
  limit             Float
  client            Client[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  admin             Admin?     @relation(fields: [adminCode], references: [code])
  adminCode         String?
  subadmin          Subadmin?  @relation(fields: [subadminCode], references: [code])
  subadminCode      String?
  master            Master?    @relation(fields: [masterCode], references: [code])
  masterCode        String?

  @@schema("user")
}

model Client {
  code              String      @id @unique
  upLink            Agent       @relation(fields: [upLinkCode], references: [code])
  upLinkCode        String
  name              String
  password          String
  mobile            String
  reference         String
  sessionCommission Float
  matchCommission   Float
  mobileCommission  Float
  status            Boolean     @default(true)
  limit             Float
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  admin             Admin?      @relation(fields: [adminCode], references: [code])
  adminCode         String?
  subadmin          Subadmin?   @relation(fields: [subadminCode], references: [code])
  subadminCode      String?
  master            Master?     @relation(fields: [masterCode], references: [code])
  masterCode        String?
  superagent        Superagent? @relation(fields: [superagentCode], references: [code])
  superagentCode    String?

  @@schema("user")
}

// --------------------
// ---------- Login Report ----------
model AdminLoginReport {
  id        String   @id @default(uuid())
  code      String
  ipAddress String
  name      String
  createdAt DateTime @default(now())

  @@schema("report")
}

model SubadminLoginReport {
  id        String   @id @default(uuid())
  code      String
  ipAddress String
  name      String
  createdAt DateTime @default(now())

  @@schema("report")
}

model MasterLoginReport {
  id        String   @id @default(uuid())
  code      String
  ipAddress String
  name      String
  createdAt DateTime @default(now())

  @@schema("report")
}

model SuperagentLoginReport {
  id        String   @id @default(uuid())
  code      String
  ipAddress String
  name      String
  createdAt DateTime @default(now())

  @@schema("report")
}

model AgentLoginReport {
  id        String   @id @default(uuid())
  code      String
  ipAddress String
  name      String
  createdAt DateTime @default(now())

  @@schema("report")
}

model ClientLoginReport {
  id        String   @id @default(uuid())
  code      String
  ipAddress String
  name      String
  createdAt DateTime @default(now())

  @@schema("report")
}

// --------------------
// ---------- Report ----------
model AdminReport {
  id        String   @id @default(uuid())
  code      String
  name      String
  createdAt DateTime @default(now())
  old       String
  new       String
  kisnekara String
  ipAddress String

  @@schema("report")
}

model SubadminReport {
  id        String   @id @default(uuid())
  code      String
  name      String
  createdAt DateTime @default(now())
  old       String
  new       String
  kisnekara String
  ipAddress String

  @@schema("report")
}

model MasterReport {
  id        String   @id @default(uuid())
  code      String
  name      String
  createdAt DateTime @default(now())
  old       String
  new       String
  kisnekara String
  ipAddress String

  @@schema("report")
}

model SuperagentReport {
  id        String   @id @default(uuid())
  code      String
  name      String
  createdAt DateTime @default(now())
  old       String
  new       String
  kisnekara String
  ipAddress String

  @@schema("report")
}

model AgentReport {
  id        String   @id @default(uuid())
  code      String
  name      String
  createdAt DateTime @default(now())
  old       String
  new       String
  kisnekara String
  ipAddress String

  @@schema("report")
}

model ClientReport {
  id        String   @id @default(uuid())
  code      String
  name      String
  createdAt DateTime @default(now())
  old       String
  new       String
  kisnekara String
  ipAddress String

  @@schema("report")
}

// --------------------
// ---------- Ledger ----------
model AdminLedger {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  collectionName String
  debit          Float
  credit         Float
  balance        Float
  type           String? // See later
  description    String?
  kisnekara      String

  @@schema("report")
}

model SubadminLedger {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  collectionName String
  debit          Float
  credit         Float
  balance        Float
  type           String? // See later
  description    String?
  kisnekara      String

  @@schema("report")
}

model MasterLedger {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  collectionName String
  debit          Float
  credit         Float
  balance        Float
  type           String? // See later
  description    String?
  kisnekara      String

  @@schema("report")
}

model SuperagentLedger {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  collectionName String
  debit          Float
  credit         Float
  balance        Float
  type           String? // See later
  description    String?
  kisnekara      String

  @@schema("report")
}

model AgentLedger {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  collectionName String
  debit          Float
  credit         Float
  balance        Float
  type           String? // See later
  description    String?
  kisnekara      String

  @@schema("report")
}

model ClientLedger {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  collectionName String
  debit          Float
  credit         Float
  balance        Float
  type           String? // See later
  description    String?
  kisnekara      String

  @@schema("report")
}

// --------------------
// ---------- Session ----------
model Session {
  id        String   @id @default(uuid())
  ipAddress String
  name      String
  agent     String
  createdAt DateTime @default(now())
  expireAt  DateTime
  active    Boolean  @default(true)
  deleted   Boolean  @default(false)

  @@schema("session")
}

// --------------------
// ---------- Match ----------
model Match {
  matchId   Int      @id @default(autoincrement())
  name      String
  dataTime  DateTime // See later from api
  type      String
  declare   String
  wonBy     String
  plusMinus Float

  @@schema("report")
}
